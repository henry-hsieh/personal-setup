name: Release workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Commit lint
        uses: wagoid/commitlint-github-action@v6

      - name: Cache docker images
        id: cache_image
        uses: AndreKurait/docker-cache@0.6.0
        with:
          key: docker-${{ runner.os }}-${{ hashFiles('src/Dockerfile') }}
          read-only: ${{ github.event_name == 'pull_request' }}

      - name: Build docker image
        run: |
          if [[ "$(docker images | grep 'personal-setup')" == "" ]]; then
            make build_docker
          fi

      - name: Build
        id: run_build
        run: make release

      - name: Upload logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: build/logs

      - name: Upload release artifact
        if: steps.run_build.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: release-artifact
          path: build/personal-setup.tar.gz

  test:
    name: Test
    needs: build
    strategy:
      matrix:
        include:
          - { os: ubuntu-latest, manager: 'apt', image: 'ubuntu:latest'}
          - { os: ubuntu-latest, manager: 'yum', image: 'centos:7'     }
          - { os: ubuntu-latest, manager: 'apt', image: 'ubuntu:16.04' }
          - { os: ubuntu-latest, manager: 'apt', image: 'ubuntu:18.04' }
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Free Disk Space
        uses: endersonmenezes/free-disk-space@v2
        with:
          remove_android: true
          remove_dotnet: true
          remove_haskell: true
          remove_tool_cache: true
          remove_swap: true
          remove_packages: "azure-cli google-cloud-cli microsoft-edge-stable google-chrome-stable firefox postgresql* temurin-* *llvm* mysql* dotnet-sdk-*"
          remove_packages_one_command: true
          remove_folders: "/usr/share/swift /usr/share/miniconda /usr/share/az* /usr/share/glade* /usr/local/lib/node_modules /usr/local/share/chromium /usr/local/share/powershell"
          testing: false

      - name: Install dependencies
        run: |
          if [[ "${{ matrix.manager }}" == "apt" ]]; then
            echo "FROM ${{ matrix.image }}" > Dockerfile
            echo "RUN apt update" >> Dockerfile
            echo "RUN apt install -y tcsh wget tar gzip make git ca-certificates" >> Dockerfile
          elif [[ "${{ matrix.manager }}" == "yum" ]]; then
            echo "FROM ${{ matrix.image }}" > Dockerfile
            echo "RUN sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*" >> Dockerfile
            echo "RUN sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*" >> Dockerfile
            echo "RUN yum install -y tcsh wget tar gzip make git ca-certificates" >> Dockerfile
          fi
          echo "RUN mkdir -p ~/miniconda3" >> Dockerfile
          echo "RUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh" >> Dockerfile
          echo "RUN bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3" >> Dockerfile
          echo "RUN rm -rf ~/miniconda3/miniconda.sh" >> Dockerfile
          echo "RUN ln -s ~/miniconda3/bin/python /usr/local/bin/python" >> Dockerfile
          echo "RUN python -m pip install pytest-workflow" >> Dockerfile
          echo "RUN ln -s ~/miniconda3/bin/pytest /usr/local/bin/pytest" >> Dockerfile

      - name: Cache docker images
        id: cache_image
        uses: AndreKurait/docker-cache@0.6.0
        with:
          key: docker-${{ runner.os }}-${{ hashFiles('Dockerfile') }}
          read-only: ${{ github.event_name == 'pull_request' }}

      - name: Build docker image
        run: |
          if [[ "$(docker images --format '{{.Repository}}:{{.Tag}}' | grep 'pytest-workflow-${{ matrix.image }}')" == "" ]]; then
            docker build -t pytest-workflow-${{ matrix.image }} .
          fi

      - name: Download release artifact
        id: download_release_artifact
        uses: actions/download-artifact@v4
        with:
          name: release-artifact
          path: build/

      - name: Run tests
        id: run_test
        run: docker run --rm -v $(pwd):$(pwd) -w $(pwd) pytest-workflow-${{ matrix.image }} bash -c 'make test'

      - name: Create log name
        run: |
          IMAGE_NAME="${{ matrix.image }}"
          echo "IMAGE_NAME=${IMAGE_NAME/:/_}" >> $GITHUB_ENV

      - name: Upload logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ env.IMAGE_NAME }}
          path: build/logs

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.test.result == 'success'

    steps:
      - name: Get token
        uses: actions/create-github-app-token@v1
        id: get_token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: Create release
        id: create_release
        uses: google-github-actions/release-please-action@v4
        with:
          token: ${{ steps.get_token.outputs.token }}
          release-type: simple

      - name: Download release artifact
        id: download_release_artifact
        if: ${{ steps.create_release.outputs.release_created }}
        uses: actions/download-artifact@v4
        with:
          name: release-artifact
          path: build/

      - name: Upload release asset
        if: steps.download_release_artifact.outcome == 'success'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ steps.get_token.outputs.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/personal-setup.tar.gz
          asset_name: personal-setup-${{ steps.create_release.outputs.tag_name }}.tar.gz
          asset_content_type: application/gzip
